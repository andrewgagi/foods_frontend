import { createSlice } from "@reduxjs/toolkit";

// Define the initial state for the shopping cart

// Create a slice for managing the shopping cart state
const ShopCartSlice = createSlice({
  name: "cart",
  initialState: {
    shopCartDetails: {
      id: "",
      title: "",
      price: "",
      image: "",
      quantity: 0,
    },
    shopCartProducts: [], // Initialize as an empty array
  },
  reducers: {
    // Reducer to add a product to the shopping cart
    addProduct: (state, action) => {
      const { id, title, price, image, quantity } = action.payload;

      const existingProductIndex = state.shopCartProducts.findIndex(
        (product) => product.id === id
      );

      if (existingProductIndex !== -1) {
        // If the product already exists in the cart, increase its quantity
        state.shopCartProducts[existingProductIndex].quantity += quantity;
      } else {
        // If the product is not in the cart, add it
        state.shopCartProducts.push({
          id,
          title,
          price,
          image,
          quantity,
        });
      }
    },

    // Reducer to increase the quantity of a product in the shopping cart
    increaseQuantity: (state, action) => {
      const { id } = action.payload;
      const product = state.shopCartProducts.find(
        (product) => product.id === id
      );
      if (product) {
        product.quantity++;
      }
    },

    // Reducer to decrease the quantity of a product in the shopping cart
    decreaseQuantity: (state, action) => {
      const { id } = action.payload;
      const product = state.shopCartProducts.find(
        (product) => product.id === id
      );
      if (product && product.quantity > 1) {
        product.quantity--;
      }
    },

    // Reducer to remove a product from the shopping cart
    removeProduct: (state, action) => {
      const id = action.payload;

      state.shopCartProducts = state.shopCartProducts.filter(
        (product) => product.id !== id
      );
    },

    // Reducer to clean the shopping cart (remove all products)
    cleanShoppingCart: (state) => {
      state.shopCartProducts = [];
    },
  },
});

// Export action creators generated for each case reducer function
export const {
  addProduct,
  increaseQuantity,
  decreaseQuantity,
  removeProduct,
  cleanShoppingCart,
} = ShopCartSlice.actions;

// Export the reducer function generated by createSlice
export default ShopCartSlice.reducer;
